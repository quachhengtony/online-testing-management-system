@page
@model WebApp.Pages.Tests.CreateModel
@{
	ViewData["Title"] = "Create";
}
@Html.AntiForgeryToken()
<h1>Create</h1>
<h4>Test</h4>
<hr />
<div class="row">
	<div class="col-md-6">
		<form method="post">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<input type="text" hidden asp-for="TestBatchMode" id="rdCreateMode" value="New" />
			<div class="form-group">
				<label asp-for="CreateTestDTO.Name" class="control-label"></label>
				<input id="ipTestName" asp-for="CreateTestDTO.Name" class="form-control" />
				<span asp-validation-for="CreateTestDTO.Name" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label class="control-label" for="slTestBatch">Batches</label>
				<select id="slTestBatch" onchange="hideShowNewBatchForm()" class="form-control">
					@{
						<option value="New" selected>New batch</option>
						if (Model.TestBatches != null)
						{
							foreach (var batch in Model.TestBatches)
							{
								<option value="@batch">@batch</option>
							}
						}
					}
				</select>
			</div>
			<div id="formNewTestBatch">
				<div class="form-group">
					<label asp-for="CreateTestDTO.KeyCode" class="control-label"></label>
					<input id="ipTestKeyCode" asp-for="CreateTestDTO.KeyCode" class="form-control" />
					<span asp-validation-for="CreateTestDTO.KeyCode" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.Duration" class="control-label"></label>
					<input id="ipTestDuration" asp-for="CreateTestDTO.Duration" class="form-control" />
					<span asp-validation-for="CreateTestDTO.Duration" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.TestCategoryId" class="control-label"></label>
					<select id="slTestCategory" asp-for="CreateTestDTO.TestCategoryId" class="form-control" asp-items="ViewBag.TestCategory"></select>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.Batch" class="control-label"></label>
					<input id="ipTestBatch" asp-for="CreateTestDTO.Batch" class="form-control" />
					<span asp-validation-for="CreateTestDTO.Batch" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.StartTime" class="control-label"></label>
					<input id="ipTestStartTime" asp-for="CreateTestDTO.StartTime" class="form-control" />
					<span asp-validation-for="CreateTestDTO.StartTime" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.EndTime" class="control-label"></label>
					<input id="ipTestEndTime" asp-for="CreateTestDTO.EndTime" class="form-control" />
					<span asp-validation-for="CreateTestDTO.EndTime" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.GradeReleaseDate" class="control-label"></label>
					<input id="ipTestGradeReleaseDate" asp-for="CreateTestDTO.GradeReleaseDate" class="form-control" />
					<span asp-validation-for="CreateTestDTO.GradeReleaseDate" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CreateTestDTO.GradeFinalizationDate" class="control-label"></label>
					<input id="ipTestGradeFinalizationDate" asp-for="CreateTestDTO.GradeFinalizationDate" class="form-control" />
					<span asp-validation-for="CreateTestDTO.GradeFinalizationDate" class="text-danger"></span>
				</div>
			</div>
			<div class="form-group">
				<input type="submit" id="btnSubmit" value="Create" class="btn btn-primary" hidden />
				<input type="button" onclick="handleSubmit()" value="Create" class="btn btn-primary" />
			</div>
		</form>
	</div>
	<div class="col-md-6">
		<div class="form-group" style="height:800px;overflow:auto;">
			<label for="exampleCheck1">Select multiple questions:</label>
			<form method="get" class="form-inline">
				<div class="form-group mx-sm-3 mb-2">
					<input name="searchString" class="form-control form-control-sm" />
				</div>
				<button id="btnSearchQuestions" class="btn btn-secondary btn-sm mb-2" type="submit">Search</button>
			</form>
		    @foreach (var item in Model.QuestionList)
			{
				<div class="form-check">
					<input class="form-check-input" type="checkbox" value="@item.Id">
					<label class="form-check-label" for="option1">
						@Html.DisplayFor(modelItem => item.Content)
					</label>
				</div>
			}
		</div>
	</div>
</div>
<div>
	<a asp-page="Index">Back to List</a>
</div>
@section Scripts {
	<script type="text/javascript">
		let localTest = {};
		let localQuestions = [];
		localTest = JSON.parse(localStorage.getItem("testInfo"));
		localQuestions = JSON.parse(localStorage.getItem("selectedQuestions"));
		if (localTest != null) {
			$("#ipTestName").val(localTest["name"]);;
			$("#ipTestKeyCode").val(localTest["keyCode"]);
			$("#ipTestStartTime").val(localTest["startTime"]);
			$("#ipTestEndTime").val(localTest["endTime"]);
			$("#ipTestGradeReleaseDate").val(localTest["gradeReleaseDate"]);
			$("#ipTestGradeFinalizationDate").val(localTest["gradeFinalizationDate"]);
			$("#ipTestDuration").val(localTest["duration"]);
			$("#ipTestBatch").val(localTest["batch"]);
			$("#slTestCategory").val(localTest["testCategory"]);
		}
		if (localQuestions != null && localQuestions.length > 0) {
			$("input[type=checkbox]").each(function () {
				if (localQuestions.includes($(this).val())) {
					$(this).prop("checked", true);
				}
			});
		}		
		$("input[type=checkbox]").change(function (e) {
			localStorage.removeItem("selectedQuestions");
			let selectedIds = [];
			$('input[type="checkbox"]:checked').each(function() {
				selectedIds.push($(this).val());
			});
			localStorage.setItem("selectedQuestions", JSON.stringify(selectedIds))
		});
		$("#btnSearchQuestions").click(function() {
			var testInfo = {
				name: $("#ipTestName").val(),
				keyCode: $("#ipTestKeyCode").val(),
				startTime: $("#ipTestStartTime").val(),
				endTime: $("#ipTestEndTime").val(),
				gradeReleaseDate: $("#ipTestGradeReleaseDate").val(),
				gradeFinalizationDate: $("#ipTestGradeFinalizationDate").val(),
				duration: $("#ipTestDuration").val(),
				batch: $("#ipTestBatch").val(),
				testCategory: $("#slTestCategory").val()
			};
			localStorage.setItem("testInfo", JSON.stringify(testInfo));
		});
		function handleSubmit() {
			let selectedQuestions = [];
			selectedQuestions = JSON.parse(localStorage.getItem("selectedQuestions"));
			if (selectedQuestions == null || selectedQuestions.length <= 0) {
				alert("Please select questions to add to the test.");
				return;
			}
			$.ajax({
				url: '?handler=AddQuestions',
				type: 'POST',
				contentType: 'application/json',
				dataType: 'json',
				beforeSend: function (xhr) {
					xhr.setRequestHeader("XSRF-TOKEN",
					$('input:hidden[name="__RequestVerificationToken"]').val());
				},
				data: JSON.stringify({
					questionIds: selectedQuestions
				}),
				success: (data) => {
					$("#btnSubmit").click();
					localStorage.removeItem("testInfo");
					localStorage.removeItem("selectedQuestions");
				},
				error: (error) => {
					alert("Error: " + error);
				}
			})
		}
		function hideShowNewBatchForm() {
			if ($("#slTestBatch :selected").val() == "New") {
				$("#rdCreateMode").val("New");
				$("#formNewTestBatch").show();
			} else {
				$("#rdCreateMode").val($("#slTestBatch").val());
				$("#formNewTestBatch").hide();
			}
		}
	</script>
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
